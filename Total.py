import subprocess

def nmap_scan(ip, opcao):
    if opcao == 1:
        comando = f'nmap -A {ip}'
    elif opcao == 2:
        comando = f'nmap -sV {ip}'
    elif opcao == 3:
        comando = f'nmap -p- {ip}'
    else:
        print("Opção inválida para o Nmap.")
        return
    subprocess.call(comando, shell=True)

def hydra_brute_force(service, ip, username, wordlist):
    comando = f'hydra -l {username} -P {wordlist} {ip} {service}'
    subprocess.call(comando, shell=True)

def nuclei_scan(url, template):
    comando = f'nuclei -t {template} -u {url}'
    subprocess.call(comando, shell=True)

def gobuster_scan(url, wordlist):
    comando = f'gobuster dir -u {url} -w {wordlist}'
    subprocess.call(comando, shell=True)

def enum4linux_scan(ip):
    comando = f'enum4linux {ip}'
    subprocess.call(comando, shell=True)

def sqlmap_scan(url):
    comando = f'sqlmap -u {url} --batch'
    subprocess.call(comando, shell=True)

def skipfish_scan(url, output_dir):
    comando = f'skipfish -o {output_dir} {url}'
    subprocess.call(comando, shell=True)

def theharvester_search(query, output_file):
    comando = f'theHarvester -d {query} -b all -f {output_file}'
    subprocess.call(comando, shell=True)

def nikto_scan(url):
    comando = f'nikto -h {url}'
    subprocess.call(comando, shell=True)

banner="""

 ██▓███   ▒█████   ██▓     ██▓ ▄████▄   ▄▄▄       ██▀███   ██▓███   ▒█████  
▓██░  ██▒▒██▒  ██▒▓██▒    ▓██▒▒██▀ ▀█  ▒████▄    ▓██ ▒ ██▒▓██░  ██▒▒██▒  ██▒
▓██░ ██▓▒▒██░  ██▒▒██░    ▒██▒▒▓█    ▄ ▒██  ▀█▄  ▓██ ░▄█ ▒▓██░ ██▓▒▒██░  ██▒
▒██▄█▓▒ ▒▒██   ██░▒██░    ░██░▒▓▓▄ ▄██▒░██▄▄▄▄██ ▒██▀▀█▄  ▒██▄█▓▒ ▒▒██   ██░
▒██▒ ░  ░░ ████▓▒░░██████▒░██░▒ ▓███▀ ░ ▓█   ▓██▒░██▓ ▒██▒▒██▒ ░  ░░ ████▓▒░
▒▓▒░ ░  ░░ ▒░▒░▒░ ░ ▒░▓  ░░▓  ░ ░▒ ▒  ░ ▒▒   ▓▒█░░ ▒▓ ░▒▓░▒▓▒░ ░  ░░ ▒░▒░▒░ 
░▒ ░       ░ ▒ ▒░ ░ ░ ▒  ░ ▒ ░  ░  ▒     ▒   ▒▒ ░  ░▒ ░ ▒░░▒ ░       ░ ▒ ▒░ 
░░       ░ ░ ░ ▒    ░ ░    ▒ ░░          ░   ▒     ░░   ░ ░░       ░ ░ ░ ▒  
             ░ ░      ░  ░ ░  ░ ░            ░  ░   ░                  ░ ░  
                              ░
"""

print(banner)

def main():
    print("Escolha uma ferramenta para executar:")
    print("1 - Nmap")
    print("2 - Hydra (Força bruta)")
    print("3 - Nuclei (Verificação com um modelo específico)")
    print("4 - Gobuster (Enumeração de diretórios)")
    print("5 - Enum4linux (Enumeração de informações em sistemas Windows)")
    print("6 - Sqlmap (Varredura de injeção SQL)")
    print("7 - Skipfish (Verificação completa de aplicativo da web)")
    print("8 - TheHarvester (Coleta de informações sobre empresas e domínios)")
    print("9 - Nikto (Varredura de segurança da web)")

    escolha = int(input("Opção: "))

    if escolha == 1:
        print("Escolha uma opção para o Nmap:")
        print("1 - Varredura agressiva")
        print("2 - Varredura simples")
        print("3 - Somente scan de portas abertas")
        opcao_nmap = int(input("Opção Nmap: "))
        ip = input("Digite o endereço IP ou nome do host alvo: ")
        nmap_scan(ip, opcao_nmap)
    elif escolha == 2:
        service = input("Digite o serviço alvo (por exemplo, ssh, ftp, http-post-form): ")
        ip = input("Digite o endereço IP ou nome do host alvo: ")
        username = input("Digite o nome de usuário alvo: ")
        wordlist = input("Digite o caminho para a lista de senhas: ")
        hydra_brute_force(service, ip, username, wordlist)
    elif escolha == 3:
        url = input("Digite a URL do site a ser verificado: ")
        template = input("Digite o caminho para o modelo Nuclei desejado: ")
        nuclei_scan(url, template)
    elif escolha == 4:
        url = input("Digite a URL do site a ser verificado: ")
        wordlist = input("Digite o caminho para a lista de diretórios e arquivos: ")
        gobuster_scan(url, wordlist)
    elif escolha == 5:
        ip = input("Digite o endereço IP do host alvo: ")
        enum4linux_scan(ip)
    elif escolha == 6:
        url = input("Digite a URL do site a ser verificado: ")
        sqlmap_scan(url)
    elif escolha == 7:
        url = input("Digite a URL do site a ser verificado: ")
        output_dir = input("Digite o diretório de saída para os resultados do Skipfish: ")
        skipfish_scan(url, output_dir)
    elif escolha == 8:
        query = input("Digite a consulta para TheHarvester (por exemplo, domínio, empresa): ")
        output_file = input("Digite o nome do arquivo de saída para TheHarvester: ")
        theharvester_search(query, output_file)
    elif escolha == 9:
        url = input("Digite a URL do site a ser verificado: ")
        nikto_scan(url)
    else:
        print("Opção inválida.")

if __name__ == "__main__":
    main()
